from base_plugin import HookResult, HookStrategy, BasePlugin
from android_utils import log
from android.content import SharedPreferences
from org.telegram.messenger import ApplicationLoader
from com.exteragram.messenger import ExteraConfig

__id__ = "plscrash"
__name__ = "PluginCrash"
__description__ = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü–∏—é –∫—Ä–∞—à–∞ [.crash]"
__author__ = "@systemxplore, @pidormodules"
__min_version__ = "11.9.0"
__version__ = "1.0.0"

class PluginCrashPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.preferences = ApplicationLoader.applicationContext.getSharedPreferences("plugin_settings", 0)

    def simulate_crash(self, plugin_id=None):
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∫—Ä–∞—à–∞
            editor = self.preferences.edit()
            editor.putBoolean("had_crash", True)
            if plugin_id:
                editor.putString("crashed_plugin_id", plugin_id)
            editor.apply()
            
            # –í—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∫—Ä–∞—à–∞
            raise Exception("Simulated crash for testing safe mode")
        except Exception as e:
            log(f"Crash simulation error: {str(e)}")

    def on_send_message_hook(self, account, params) -> HookStrategy:
        if not isinstance(params.message, str):
            return HookResult()

        message = params.message.strip()
        
        if message == ".crash":
            self.simulate_crash()
            params.message = "‚ö†Ô∏è –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫—Ä–∞—à –ø–ª–∞–≥–∏–Ω–∞. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ."
            return HookResult(strategy=HookStrategy.MODIFY, params=params)
            
        elif message.startswith(".crash "):
            plugin_id = message[7:].strip()
            self.simulate_crash(plugin_id)
            params.message = f"‚ö†Ô∏è –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫—Ä–∞—à –ø–ª–∞–≥–∏–Ω–∞ {plugin_id}. –û–Ω –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ."
            return HookResult(strategy=HookStrategy.MODIFY, params=params)
            
        elif message == ".crash_status":
            had_crash = self.preferences.getBoolean("had_crash", False)
            crashed_plugin = self.preferences.getString("crashed_plugin_id", None)
            is_safe_mode = ExteraConfig.pluginsSafeMode
            
            status = "üõ°Ô∏è –°—Ç–∞—Ç—É—Å –∫—Ä–∞—à–∞:\n"
            status += f"‚Ä¢ –ë—ã–ª –∫—Ä–∞—à: {'–î–∞' if had_crash else '–ù–µ—Ç'}\n"
            if had_crash:
                status += f"‚Ä¢ –ö—Ä–∞—à–Ω—É–≤—à–∏–π –ø–ª–∞–≥–∏–Ω: {crashed_plugin if crashed_plugin else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
            status += f"‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if is_safe_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}"
            
            params.message = status
            return HookResult(strategy=HookStrategy.MODIFY, params=params)
            
        elif message == ".crash_clear":
            self.preferences.edit().remove("had_crash").remove("crashed_plugin_id").apply()
            params.message = "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∞—à–µ–π –æ—á–∏—â–µ–Ω–∞"
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        return HookResult()
