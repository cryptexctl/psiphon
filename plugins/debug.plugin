import os
import traceback
import plugins_manager
from android.os import Build, SystemClock
from android.app import ActivityManager
from android.net import NetworkCapabilities
from android.content import Context, Intent, IntentFilter
from java.lang import System as JavaSystem
from java.util import Locale
from org.telegram.messenger import SharedConfig, ApplicationLoader, UserConfig
from base_plugin import BasePlugin, HookResult, HookStrategy
from settings import Header, Switch, Divider
from android_utils import log
from client_utils import get_user_config
from org.telegram.tgnet import TLRPC

__id__ = "debug"
__name__ = "Debug"
__description__ = "Device & Plugin info [.dg]"
__author__ = "@exteraDev"
__min_version__ = "11.9.0"
__icon__ = "SpottyAnimated/42"

class DebugPlugin(BasePlugin):
    def on_plugin_load(self):
        self.add_hook("on_send_message")
        
    def on_plugin_unload(self):
        self.remove_hook("on_send_message")
        
    def create_settings(self):
        lang = Locale.getDefault().getLanguage()
        if lang.startswith("ru"):
            settings_options = [
                ("show_device_info", "Показать информацию об устройстве", "Включить детали устройства в вывод отладки"),
                ("show_app_info", "Показать информацию о приложении", "Включить версию приложения в вывод"),
                ("show_plugins", "Показать активные плагины", "Показать все включённые плагины в выводе"),
                ("show_connection", "Показать информацию о соединении", "Включить детали сети"),
                ("show_storage", "Показать информацию о хранилище", "Включить детали хранилища и кэша"),
                ("show_memory", "Показать информацию о памяти", "Включить использование ОЗУ"),
                ("show_account", "Показать информацию об аккаунте", "Включить основную информацию об аккаунте"),
                ("show_battery", "Показать информацию о батарее", "Включить статус батареи"),
                ("show_display", "Показать информацию о дисплее", "Включить детали экрана"),
                ("show_system", "Показать информацию о системе", "Включить аптайм и язык системы"),
            ]
            header_text = "Настройки отладочного плагина"
            divider_text = "Команда: .dg"
        elif lang.startswith("pt"):
            settings_options = [
                ("show_device_info", "Mostrar informações do dispositivo", "Incluir detalhes do dispositivo na saída de debug"),
                ("show_app_info", "Mostrar informações do app", "Incluir versão do app na saída"),
                ("show_plugins", "Mostrar plugins ativos", "Listar todos os plugins habilitados na saída"),
                ("show_connection", "Mostrar informações de conexão", "Incluir detalhes da conexão de rede"),
                ("show_storage", "Mostrar informações de armazenamento", "Incluir detalhes de armazenamento e cache"),
                ("show_memory", "Mostrar informações de memória", "Incluir uso de RAM"),
                ("show_account", "Mostrar informações da conta", "Incluir informações básicas da conta"),
                ("show_battery", "Mostrar informações da bateria", "Incluir status da bateria"),
                ("show_display", "Mostrar informações da tela", "Incluir detalhes da tela"),
                ("show_system", "Mostrar informações do sistema", "Incluir tempo ligado e idioma do sistema"),
            ]
            header_text = "Configurações do Plugin de Debug"
            divider_text = "Comando: .dg"
        else:
            settings_options = [
                ("show_device_info", "Show Device Information", "Include device details in the debug output"),
                ("show_app_info", "Show App Information", "Include version details in the output"),
                ("show_plugins", "Show Active Plugins", "List all enabled plugins in the debug output"),
                ("show_connection", "Show Connection Information", "Include network connection details"),
                ("show_storage", "Show Storage Information", "Include storage and cache details"),
                ("show_memory", "Show Memory Information", "Include RAM and memory usage details"),
                ("show_account", "Show Account Information", "Include basic account information"),
                ("show_battery", "Show Battery Information", "Include battery status and details"),
                ("show_display", "Show Display Information", "Include screen details and resolution"),
                ("show_system", "Show System Information", "Include system uptime and language settings")
            ]
            header_text = "Debug Plugin Settings"
            divider_text = "Command: .dg"

        settings = [Header(text=header_text)]
        for key, text, subtext in settings_options:
            settings.append(Switch(key=key, text=text, default=True, subtext=subtext))
        settings.append(Divider(text=divider_text))
        return settings
    
    def on_send_message_hook(self, account, params):
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            return HookResult()
        
        if not params.message.startswith(".dg"):
            return HookResult()
            
        try:
            debug_info = self._get_debug_info()
            params.message = debug_info

            if not hasattr(params, "entities") or params.entities is None:
                params.entities = []
            entity = TLRPC.TL_messageEntityBlockquote() 
            entity.collapsed = True
            entity.offset = 0
            entity.length = int(len(debug_info.encode(encoding='utf_16_le')) / 2)
            params.entities.add(entity)
            return HookResult(strategy=HookStrategy.MODIFY, params=params)
        except Exception as e:
            error_msg = f"Error retrieving debug information: {str(e)}"
            log(f"{error_msg}\n{traceback.format_exc()}")
            params.message = error_msg
            return HookResult(strategy=HookStrategy.MODIFY, params=params)
    
    def _get_device_info(self):
        if not self.get_setting("show_device_info", True):
            return ""
        try:
            return (
                "📱 Device Information:\n\n"
                f"• Manufacturer: {Build.MANUFACTURER}\n"
                f"• Model: {Build.MODEL}\n"
                f"• Android Version: {Build.VERSION.RELEASE}\n"
                f"• Board: {Build.BOARD}\n"
                f"• Brand: {Build.BRAND}\n"
                f"• Codename: {Build.VERSION.CODENAME}\n"
                f"• ID: {Build.ID}\n"
                f"• Hardware: {Build.HARDWARE}\n"
                f"• Performance: {SharedConfig.performanceClassName(SharedConfig.getDevicePerformanceClass())}\n"
            )
        except Exception as e:
            return f"Error retrieving device info: {str(e)}\n"
    
    def _get_app_info(self):
        if not self.get_setting("show_app_info", True):
            return ""
        try:
            context = ApplicationLoader.applicationContext
            package_name = context.getPackageName()
            package_manager = context.getPackageManager()
            package_info = package_manager.getPackageInfo(package_name, 0)
            version_name = package_info.versionName
            version_code = package_info.versionCode
            if Build.VERSION.SDK_INT >= Build.VERSION_CODES.P:
                version_code = package_info.getLongVersionCode()
            return (
                "\n📱 App Information:\n\n"
                f"• Package Name: {package_name}\n"
                f"• App Version: {version_name} ({version_code})\n"
            )
        except Exception as e:
            return f"\nError retrieving app info: {str(e)}\n"
    
    def _get_connection_info(self):
        if not self.get_setting("show_connection", True):
            return ""
        try:
            context = ApplicationLoader.applicationContext
            conn_manager = context.getSystemService(Context.CONNECTIVITY_SERVICE)
            is_connected = False
            connection_type = "None"
            if conn_manager:
                network = conn_manager.getActiveNetwork()
                if network:
                    capabilities = conn_manager.getNetworkCapabilities(network)
                    is_connected = capabilities is not None
                    if capabilities:
                        transport_types = {
                            NetworkCapabilities.TRANSPORT_WIFI: "WiFi",
                            NetworkCapabilities.TRANSPORT_CELLULAR: "Mobile Data",
                            NetworkCapabilities.TRANSPORT_ETHERNET: "Ethernet",
                            NetworkCapabilities.TRANSPORT_BLUETOOTH: "Bluetooth",
                            NetworkCapabilities.TRANSPORT_VPN: "VPN"
                        }
                        for transport, name in transport_types.items():
                            if capabilities.hasTransport(transport):
                                connection_type = name
                                break
            return (
                "\n🔌 Connection Information:\n\n"
                f"• Connected: {'Yes' if is_connected else 'No'}\n"
                f"• Connection Type: {connection_type}\n"
            )
        except Exception as e:
            return f"\nError retrieving connection info: {str(e)}\n"
    
    def _format_size(self, size_bytes):
        if size_bytes < 0:
            return "0 B"
        elif size_bytes < 1024:
            return f"{size_bytes} B"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.2f} KB"
        elif size_bytes < 1024 * 1024 * 1024:
            return f"{size_bytes / (1024 * 1024):.2f} MB" 
        else:
            return f"{size_bytes / (1024 * 1024 * 1024):.2f} GB"
    
    def _get_storage_info(self):
        if not self.get_setting("show_storage", True):
            return ""
        try:
            cache_path = ApplicationLoader.getFilesDirFixed()
            external_cache = ApplicationLoader.applicationContext.getExternalCacheDir()
            cache_size = self._get_dir_size(cache_path) if cache_path else 0
            external_cache_size = self._get_dir_size(external_cache.getAbsolutePath()) if external_cache else 0
            return (
                "\n💾 Storage Information:\n\n"
                f"• Telegram Cache Size: {self._format_size(cache_size)}\n"
                f"• External Cache Size: {self._format_size(external_cache_size)}\n"
                f"• Cache Directory: {cache_path}\n"
            )
        except Exception as e:
            return f"\nError retrieving storage info: {str(e)}\n"
    
    def _get_dir_size(self, path):
        total_size = 0
        if not path or not isinstance(path, str):
            return total_size
        try:
            for dirpath, dirnames, filenames in os.walk(path):
                for f in filenames:
                    fp = os.path.join(dirpath, f)
                    if os.path.exists(fp):
                        try:
                            total_size += os.path.getsize(fp)
                        except Exception as e:
                            log(f"Error accessing file {fp}: {e}")
        except Exception as e:
            log(f"Error calculating directory size: {e}")
        return total_size
    
    def _get_memory_info(self):
        if not self.get_setting("show_memory", True):
            return ""
        try:
            context = ApplicationLoader.applicationContext
            activity_manager = context.getSystemService(Context.ACTIVITY_SERVICE)
            mem_info = ActivityManager.MemoryInfo()
            activity_manager.getMemoryInfo(mem_info)
            total_mem = mem_info.totalMem / (1024 * 1024)
            avail_mem = mem_info.availMem / (1024 * 1024)
            used_mem = total_mem - avail_mem
            percent_used = (used_mem / total_mem) * 100.0 if total_mem > 0 else 0
            return (
                "\n🧠 Memory Information:\n\n"
                f"• Total Memory: {total_mem:.2f} MB\n"
                f"• Available Memory: {avail_mem:.2f} MB\n"
                f"• Used Memory: {used_mem:.2f} MB ({percent_used:.1f}%)\n"
                f"• Low Memory: {'Yes' if mem_info.lowMemory else 'No'}\n"
            )
        except Exception as e:
            return f"\nError retrieving memory info: {str(e)}\n"
    
    def _get_account_info(self):
        if not self.get_setting("show_account", True):
            return ""
        try:
            current_account = UserConfig.selectedAccount
            user_config = get_user_config()
            user_id = user_config.getClientUserId()
            premium = user_config.isPremium()
            return (
                "\n👤 Account Information:\n\n"
                f"• Account ID: {user_id}\n"
                f"• Premium: {'Yes' if premium else 'No'}\n"
                f"• Account Index: {current_account}\n"
            )
        except Exception as e:
            return f"\nError retrieving account info: {str(e)}\n"
    
    def _get_battery_info(self):
        if not self.get_setting("show_battery", True):
            return ""
        try:
            context = ApplicationLoader.applicationContext
            battery_intent = context.registerReceiver(None, IntentFilter(Intent.ACTION_BATTERY_CHANGED))
            if battery_intent:
                level = battery_intent.getIntExtra("level", 0)
                scale = battery_intent.getIntExtra("scale", 100)
                percent = (float(level) * 100.0) / float(scale) if scale > 0 else 0
                status = battery_intent.getIntExtra("status", 0)
                is_charging = status in [2, 5]
                health = battery_intent.getIntExtra("health", 1)
                temp = battery_intent.getIntExtra("temperature", 0) / 10.0
                voltage = battery_intent.getIntExtra("voltage", 0) / 1000.0
                health_statuses = {
                    1: "Unknown", 2: "Good", 3: "Overheated", 
                    4: "Dead", 5: "Over voltage", 6: "Unspecified failure", 7: "Cold"
                }
                health_status = health_statuses.get(health, "Unknown")
                return (
                    "\n🔋 Battery Information:\n\n"
                    f"• Level: {percent:.1f}%\n"
                    f"• Charging: {'Yes' if is_charging else 'No'}\n"
                    f"• Health: {health_status}\n"
                    f"• Temperature: {temp}°C\n"
                    f"• Voltage: {voltage}V\n"
                )
            return ""
        except Exception as e:
            return f"\nError retrieving battery info: {str(e)}\n"
    
    def _get_display_info(self):
        if not self.get_setting("show_display", True):
            return ""
        try:
            context = ApplicationLoader.applicationContext
            wm = context.getSystemService(Context.WINDOW_SERVICE)
            display = wm.getDefaultDisplay()
            metrics = context.getResources().getDisplayMetrics()
            width = metrics.widthPixels
            height = metrics.heightPixels
            density = metrics.density
            dpi = metrics.densityDpi
            x_dpi = metrics.xdpi
            y_dpi = metrics.ydpi
            diagonal_pixels = (width ** 2 + height ** 2) ** 0.5
            diagonal_inches = diagonal_pixels / dpi if dpi > 0 else 0
            refresh_rate = round(display.getRefreshRate(), 1)
            return (
                "\n📱 Display Information:\n\n"
                f"• Resolution: {width}x{height}\n"
                f"• Density: {density:.2f}x ({dpi} DPI)\n"
                f"• Estimated Size: {diagonal_inches:.2f} inches\n"
                f"• Refresh Rate: {refresh_rate} Hz\n"
            )
        except Exception as e:
            return f"\nError retrieving display info: {str(e)}\n"
    
    def _get_system_info(self):
        if not self.get_setting("show_system", True):
            return ""
        try:
            uptime_ms = SystemClock.elapsedRealtime()
            uptime_seconds = int(uptime_ms / 1000)
            days = uptime_seconds // 86400
            hours = (uptime_seconds % 86400) // 3600
            minutes = (uptime_seconds % 3600) // 60
            seconds = uptime_seconds % 60
            uptime_str = f"{days}d {hours}h {minutes}m {seconds}s"
            cpu_cores = os.cpu_count() or 0
            current_locale = Locale.getDefault()
            return (
                "\n⚙️ System Information:\n\n"
                f"• CPU Cores: {cpu_cores}\n"
                f"• System Uptime: {uptime_str}\n"
                f"• Language: {current_locale.getLanguage()}-{current_locale.getCountry()}\n"
                f"• Java VM: {JavaSystem.getProperty('java.vm.version')}\n"
            )
        except Exception as e:
            return f"\nError retrieving system info: {str(e)}\n"
    
    def _get_plugins_info(self):
        if not self.get_setting("show_plugins", True):
            return ""
        try:
            active_plugins = [plugin for plugin in plugins_manager.PluginsManager._plugins.values() if plugin.enabled]
            active_names = [plugin.name for plugin in active_plugins]
            if active_names:
                plugins_info = (
                    f"\n🧩 Enabled Plugins ({len(active_names)}):\n"
                    + "\n".join(f"• {name}" for name in sorted(active_names))
                )
            else:
                plugins_info = "\n🧩 Enabled Plugins: None"
            return plugins_info
        except Exception as e:
            return f"\nError retrieving plugin info: {str(e)}\n"
    
    def _get_debug_info(self):
        info_getters = [
            self._get_device_info,
            self._get_app_info,
            self._get_connection_info,
            self._get_memory_info,
            self._get_storage_info,
            self._get_battery_info,
            self._get_display_info,
            self._get_system_info,
            self._get_account_info,
            self._get_plugins_info
        ]
        parts = []
        for getter in info_getters:
            info = getter()
            if info:
                parts.append(info)
        debug_info = "\n".join(parts) if parts else "No debug information available."
        
        return f"Debug\n{debug_info}"